# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: MSBuild

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Debug

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Gather environment info
      run: npx envinfo

    - uses: GuillaumeFalourd/setup-windows10-sdk-action@v1.11
      with:
        sdk-version: 20348

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: List installed Windows SDKs
      run: |
           & "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -products * -requires Microsoft.VisualStudio.Component.Windows10SDK -property installationPath

    - name: Command Line Script
      working-directory: ${{env.GITHUB_WORKSPACE}}
      shell: cmd
      run: |
           set BATDIR=D:\a\1\s\
           echo ----------------------------------------------------
           echo Extract pthread files
           echo ----------------------------------------------------
           set PTHREAD="%BATDIR%ThirdFunc\pthread\Pre-built.2"
           if not exist "%BATDIR%ThirdFunc\pthread\Pre-built.2\lib" (
               cd lib-src
               7za x pthreads-w32-2-9-1-release.zip -o%BATDIR%ThirdFunc\pthread -y
               cd %BATDIR%
           ) else (
               echo pthread lib exist, skip extract pthread!
           )
           echo ----------------------------------------------------
           echo Setup libmysql files
           echo ----------------------------------------------------
           if not exist "%BATDIR%ThirdFunc\libmysql\" (
               md "%BATDIR%ThirdFunc\libmysql\"
           )
           if not exist "%BATDIR%ThirdFunc\libmysql\libmysql.lib" (
               cd lib-src
               7za x mysql-connector-c-6.1.11-win32.zip -o%BATDIR%ThirdFunc\libmysql -y
               color e4
               cd %BATDIR%ThirdFunc\libmysql
               copy mysql-connector-c-6.1.11-win32\lib\* .
               rd /s /q %BATDIR%ThirdFunc\libmysql\mysql-connector-c-6.1.11-win32
               color 07
               cd %BATDIR%
           ) else (
               echo libmysql.lib exist, skip setup mysql!
           )
           echo ----------------------------------------------------
           echo Compile boost libraries
           echo ----------------------------------------------------
           set BOOST=%BATDIR%ThirdFunc\boost_1_60_0
           set vcvars= "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat"
           call %vcvars% x86
           if not exist "%BOOST%\stage\lib" (
               cd lib-src
               7za x boost_1_60_0.7z -o"%BATDIR%ThirdFunc" -y
               7za x boost_1_60_0.zip -o"%BATDIR%ThirdFunc" -y
               cd %BATDIR%
           ) else (
               echo boost libraries exist, skip compile boost!
           )
           echo ----------------------------------------------------
           echo Compile openssl libraries
           echo ----------------------------------------------------
           set SSLDIR=%BATDIR%ThirdFunc\openssl-1.1.1a
           if not exist "%SSLDIR%lib\libcrypto.lib" (
               cd lib-src
               7za x openssl-1.1.1a.tar.gz -y
               7za x openssl-1.1.1a.tar -o"%BATDIR%ThirdFunc" -y
               if not exist "%SSLDIR%\lib\" (
                   md "%SSLDIR%\lib\"
               )
               copy /y libcrypto.lib "%SSLDIR%\lib\"
               if not exist "%SSLDIR%\include\openssl\" (
                   md "%SSLDIR%\include\openssl\"
               )
               copy /y opensslconf.h "%SSLDIR%\include\openssl\"
               cd %BATDIR%
           ) else (
               echo libcrypto exist, skip compile openssl!
           )
           if not exist "%BATDIR%Bin\" (
               md "%BATDIR%Bin\"
           )

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}
